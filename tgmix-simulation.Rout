
R version 4.0.1 (2020-06-06) -- "See Things Now"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-w64-mingw32/x64 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> 
> 
> source("C:/Users/s198663/Documents/TGM/simulation/preamble.R")
Loading required package: Matrix
Warning message:
package 'lme4' was built under R version 4.0.3 
> 
> source("C:/Users/s198663/Documents/TGM/simulation/generate_simulation.R")
> 
> 
> 
> 
> 
> 
> M=1000
> for(m in simulation_iteration:M){
+ one.dataset=mouse.sim[m,,]
+ beta.v = c(0.1,1,2,-30)
+ valid_dataset = F
+ while(!valid_dataset){
+ data_with_dropout = t(apply(one.dataset[,-c(1)], 1,dropout.process, beta=beta.v))
+ valid_dataset = is.matrix(make_cv_dataset(data_with_dropout[1:n,]))*sum(rowSums(!is.na(make_cc_dataset(data_with_dropout[1:n,])))>=1)
+ 
+ valid_dataset = valid_dataset*is.matrix(make_cv_dataset(data_with_dropout[-seq(1,n),]))*sum(rowSums(!is.na(make_cc_dataset(data_with_dropout[-seq(1,n),])))>=1)
+ 
+ valid_dataset = valid_dataset*(sum(is.na(make_cc_dataset(data_with_dropout[1:n,])))>0)*(sum(is.na(make_cc_dataset(data_with_dropout[-seq(1,n),])))>0)
+ }
+ cat("\n \n Valid dataset 1: ")
+ data_with_dropout[1:n,]
+ cat("\n \n Valid dataset 2: ")
+ data_with_dropout[-seq(1,n),]
+ ccdataset.g1 = make_cc_dataset(data_with_dropout[1:n,colSums(is.na(data_with_dropout[1:n,]))<n])
+ data_with_dropout[-seq(1,n),]
+ ccdataset.g2 = make_cc_dataset(data_with_dropout[-seq(1,n),colSums(is.na(data_with_dropout[-seq(1,n),]))<n])
+ 
+ lvcfdataset.g1 = lvcf(data_with_dropout[1:n,])
+ lvcfdataset.g2 = lvcf(data_with_dropout[-seq(1,n),])
+ 
+ cvdataset.g1 = make_cv_dataset(data_with_dropout[1:n,])
+ cvdataset.g2= make_cv_dataset(data_with_dropout[-seq(1,n),])
+ 
+ data_for_mi=filter_all_na(as.data.frame(data_with_dropout))
+ data_for_mi$Animal=1:nrow(data_with_dropout)
+ colnames(data_for_mi)[-c(ncol(data_for_mi))] = paste("Day", time, sep="")[1:(ncol(data_for_mi)-1)]
+ data_for_mi=data_for_mi[,c(ncol(data_for_mi),1:(ncol(data_for_mi)-1))]
+ 
+ midataset.g1 = tgmix_imputation(data_for_mi[1:n,colSums(is.na(data_for_mi[1:n,]))<n], plots=F)
+ midataset.g2 = tgmix_imputation(data_for_mi[-seq(1,n),colSums(is.na(data_for_mi[-seq(1,n),]))<n], plots=F)
+     
+ trueMeans.g1 = colMeans(as.data.frame(t(apply(one.dataset[1:n, -c(1)],1,as.numeric))))
+ trueMeans.g2 = colMeans(as.data.frame(t(apply(one.dataset[-seq(1,n), -c(1)],1,as.numeric))))
+ ccMeans.g1 = colMeans(ccdataset.g1[rowSums(is.na(ccdataset.g1))<1,])
+ ccMeans.g2 = colMeans(ccdataset.g2[rowSums(is.na(ccdataset.g2))<1,])
+ tgmixMeans.g1 = colMeans(midataset.g1[,-c(1:2)])
+ tgmixMeans.g2 = colMeans(midataset.g2[,-c(1:2)])
+ tgmixMeanBias.g1 = tgmixMeans.g1 - trueMeans.g1[1:length(tgmixMeans.g1)]
+ tgmixMeanBias.g2 = tgmixMeans.g2 - trueMeans.g2[1:length(tgmixMeans.g2)]
+ ccMeanBias.g1 = ccMeans.g1 - trueMeans.g1[1:length(ccMeans.g1)]
+ ccMeanBias.g2 = ccMeans.g2 - trueMeans.g2[1:length(ccMeans.g2)]
+     
+ mean.bias.g1[m,'cc',1:length(ccMeanBias.g1)] = ccMeanBias.g1
+ mean.bias.g1[m, 'mi',1:length(tgmixMeanBias.g1)] = tgmixMeanBias.g1
+ mean.bias.g2[m,'cc',1:length(ccMeanBias.g2)] = ccMeanBias.g2
+ 
+ mean.bias.g2[m, 'mi',1:length(tgmixMeanBias.g2)] = tgmixMeanBias.g2
+     
+     
+     
+     
+ truedataset.g1= as.data.frame(t(apply(one.dataset[1:n, -c(1)],1,as.numeric)))
+ truedataset.g2 = t(apply(one.dataset[-seq(1,n), -c(1)],1,as.numeric))
+ lvcfBias.g1 = colMeans(as.data.frame(lvcfdataset.g1[[1]]) - truedataset.g1)
+ lvcfBias.g2 = colMeans(as.data.frame(lvcfdataset.g2[[1]]) - truedataset.g2)
+ 
+     
+ lastcol.g1 =ncol(midataset.g1) - 2
+ lastcol.g2 =ncol(midataset.g2)-2
+ miBias.g1 = get_mi_bias(midataset.g1, truedataset.g1[,1:lastcol.g1])
+ if(sum(miBias.g1[1:2])>0){
+     cat("\n \n MI Bias: ")
+     miBias.g1
+     dput(miBias.g1, "mibiasg1.txt")
+     cat("\n\n MI complete dataset:")
+     midataset.g1
+     dput(midataset.g1, "midatasetg1.txt")
+     cat("\n \n True Dataset:")
+     truedataset.g1
+     dput(truedataset.g1, "truedatasetg1.txt")
+     break
+ }
+ miBias.g2 = get_mi_bias(midataset.g2, truedataset.g2[,1:lastcol.g2])
+ 
+ pointwise.bias.g1[m,'mi',1:length(miBias.g1)] = miBias.g1
+ pointwise.bias.g2[m, 'mi',1:length(miBias.g2)] = miBias.g2
+ 
+ pointwise.bias.g1[m,'lvcf', 1:length(lvcfBias.g1)] = lvcfBias.g1
+ pointwise.bias.g2[m, 'lvcf',1:length(lvcfBias.g2)] = lvcfBias.g2
+     
+ cv.fit.g2 = lme4::fixef(fit_lmer(cvdataset.g2)[[1]])
+ cv.mse.g2 = fit_lmer(cvdataset.g2)[[2]]
+ 
+ mi.est.and.mse = fit_lmer_multiple(midataset.g2)
+ mi.fit.est = mi.est.and.mse[[1]]
+ mi.fit.mse = mi.est.and.mse[[2]]
+ 
+ flmg1 = fit_lmer_multiple(midataset.g1)
+ linear.estimates.g1[m,'mi',c('intercept','estimate')] = flmg1[[1]]
+ linear.estimates.g1[m, 'mi',c('mse')] = flmg1[[2]]
+ 
+ fleg1 = fit_lmer(cvdataset.g1)
+ 
+ linear.estimates.g1[m,'cv',c('intercept','estimate')] = lme4::fixef(fleg1[[1]])
+ linear.estimates.g1[m,'cv',c('mse')] = fleg1[[2]]
+ 
+ flmg2 = fit_lmer_multiple(midataset.g2)
+ linear.estimates.g2[m,'mi',c('intercept','estimate')] = flmg2[[1]]
+ linear.estimates.g2[m, 'mi',c('mse')] = flmg2[[2]]
+ 
+ fleg2 = fit_lmer(cvdataset.g2)
+ 
+ linear.estimates.g2[m,'cv',c('intercept','estimate')] = lme4::fixef(fleg2[[1]])
+ linear.estimates.g2[m,'cv',c('mse')] = fleg2[[2]]
+ 
+ 
+ lvcfdataset.g1.new=as.data.frame(lvcfdataset.g1[1])
+ 
+ lvcfdataset.g2.new=as.data.frame(lvcfdataset.g2[1])
+ lvcf.all = rbind(lvcfdataset.g1.new, lvcfdataset.g2.new)
+     
+ 
+ maxcol.cc =  min(c(ncol(ccdataset.g1), ncol(ccdataset.g2)))
+ cc.all = rbind(as.data.frame(ccdataset.g1[,1:maxcol.cc]), as.data.frame(ccdataset.g2[,1:maxcol.cc]))
+ maxcol = min(c(ncol(cvdataset.g1), ncol(cvdataset.g2)))
+ cv.all = rbind(as.data.frame(cvdataset.g1[,1:maxcol]), as.data.frame(cvdataset.g2[,1:maxcol]))
+ idx=1
+ for (df in list(lvcf.all, cc.all,cv.all)){
+     main.analysis.gp.diff[m,idx] = get_main_analysis(df)[[2]][1]$coefficients[1]
+     idx=idx+1
+     #print(df)
+ }
+ 
+ for(imputation in 1:max(midataset.g1$imputation)){
+     colcount = min(c(ncol(midataset.g1), ncol(midataset.g2)))
+     mi.all = rbind(midataset.g1[midataset.g1$imputation==imputation,1:colcount], midataset.g2[midataset.g2$imputation==imputation,1:colcount])
+     main.analysis.gp.diff[m, idx] = get_main_analysis(mi.all[,-c(1,2)])[[2]][1]$coefficients[1]
+ }
+ 
+ dput(mean.bias.g1, "mean.bias.g1.txt")
+ dput(mean.bias.g2, "mean.bias.g2.txt")
+ dput(pointwise.bias.g1, "pointwise.bias.g1.txt")
+ dput(pointwise.bias.g2, "pointwise.bias.g2.txt")
+ dput(linear.estimates.g1, "linear.estimates.g1.txt")
+ dput(linear.estimates.g2,"linear.estimates.g2.txt")
+ dput(main.analysis.gp.diff, "main.analysis.gp.diff.txt")
+ 
+ m_next = m+1
+ cat(m_next,"\n", file="simulation_iteration.txt")
+ 
+ }

 
 Valid dataset 1: 
 
 Valid dataset 2: [1] 1
[1] 2
[1] 3
[1] 4
[1] 5
[1] 1
[1] 2
[1] 3
[1] 4
[1] 5
Compiling Stan program...
Warning message:
In system(paste(cmd, "-n")) : 'make' not found
Start sampling
starting worker pid=9652 on localhost:11394 at 08:05:04.683
starting worker pid=6732 on localhost:11394 at 08:05:05.052
starting worker pid=14132 on localhost:11394 at 08:05:05.392
starting worker pid=14072 on localhost:11394 at 08:05:05.734

SAMPLING FOR MODEL 'cb4c303701ba19f2133419a7654f6255' NOW (CHAIN 1).
Chain 1: 
Chain 1: Gradient evaluation took 0 seconds
Chain 1: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.
Chain 1: Adjust your expectations accordingly!
Chain 1: 
Chain 1: 
Chain 1: Iteration:    1 / 2000 [  0%]  (Warmup)
Chain 1: Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 1: Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 1: Iteration:  501 / 2000 [ 25%]  (Sampling)
Chain 1: Iteration:  700 / 2000 [ 35%]  (Sampling)
Chain 1: Iteration:  900 / 2000 [ 45%]  (Sampling)
Chain 1: Iteration: 1100 / 2000 [ 55%]  (Sampling)
Chain 1: Iteration: 1300 / 2000 [ 65%]  (Sampling)
Chain 1: Iteration: 1500 / 2000 [ 75%]  (Sampling)
Chain 1: Iteration: 1700 / 2000 [ 85%]  (Sampling)
Chain 1: Iteration: 1900 / 2000 [ 95%]  (Sampling)
Chain 1: Iteration: 2000 / 2000 [100%]  (Sampling)
Chain 1: 
Chain 1:  Elapsed Time: 0.109 seconds (Warm-up)
Chain 1:                0.205 seconds (Sampling)
Chain 1:                0.314 seconds (Total)
Chain 1: 

SAMPLING FOR MODEL 'cb4c303701ba19f2133419a7654f6255' NOW (CHAIN 2).
Chain 2: 
Chain 2: Gradient evaluation took 0 seconds
Chain 2: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.
Chain 2: Adjust your expectations accordingly!
Chain 2: 
Chain 2: 
Chain 2: Iteration:    1 / 2000 [  0%]  (Warmup)
Chain 2: Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 2: Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 2: Iteration:  501 / 2000 [ 25%]  (Sampling)
Chain 2: Iteration:  700 / 2000 [ 35%]  (Sampling)
Chain 2: Iteration:  900 / 2000 [ 45%]  (Sampling)
Chain 2: Iteration: 1100 / 2000 [ 55%]  (Sampling)
Chain 2: Iteration: 1300 / 2000 [ 65%]  (Sampling)
Chain 2: Iteration: 1500 / 2000 [ 75%]  (Sampling)
Chain 2: Iteration: 1700 / 2000 [ 85%]  (Sampling)
Chain 2: Iteration: 1900 / 2000 [ 95%]  (Sampling)
Chain 2: Iteration: 2000 / 2000 [100%]  (Sampling)
Chain 2: 
Chain 2:  Elapsed Time: 0.128 seconds (Warm-up)
Chain 2:                0.331 seconds (Sampling)
Chain 2:                0.459 seconds (Total)
Chain 2: 

SAMPLING FOR MODEL 'cb4c303701ba19f2133419a7654f6255' NOW (CHAIN 3).
Chain 3: 
Chain 3: Gradient evaluation took 0 seconds
Chain 3: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.
Chain 3: Adjust your expectations accordingly!
Chain 3: 
Chain 3: 
Chain 3: Iteration:    1 / 2000 [  0%]  (Warmup)
Chain 3: Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 3: Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 3: Iteration:  501 / 2000 [ 25%]  (Sampling)
Chain 3: Iteration:  700 / 2000 [ 35%]  (Sampling)
Chain 3: Iteration:  900 / 2000 [ 45%]  (Sampling)
Chain 3: Iteration: 1100 / 2000 [ 55%]  (Sampling)
Chain 3: Iteration: 1300 / 2000 [ 65%]  (Sampling)
Chain 3: Iteration: 1500 / 2000 [ 75%]  (Sampling)
Chain 3: Iteration: 1700 / 2000 [ 85%]  (Sampling)
Chain 3: Iteration: 1900 / 2000 [ 95%]  (Sampling)
Chain 3: Iteration: 2000 / 2000 [100%]  (Sampling)
Chain 3: 
Chain 3:  Elapsed Time: 0.127 seconds (Warm-up)
Chain 3:                0.235 seconds (Sampling)
Chain 3:                0.362 seconds (Total)
Chain 3: 

SAMPLING FOR MODEL 'cb4c303701ba19f2133419a7654f6255' NOW (CHAIN 4).
Chain 4: 
Chain 4: Gradient evaluation took 0 seconds
Chain 4: 1000 transitions using 10 leapfrog steps per transition would take 0 seconds.
Chain 4: Adjust your expectations accordingly!
Chain 4: 
Chain 4: 
Chain 4: Iteration:    1 / 2000 [  0%]  (Warmup)
Chain 4: Iteration:  200 / 2000 [ 10%]  (Warmup)
Chain 4: Iteration:  400 / 2000 [ 20%]  (Warmup)
Chain 4: Iteration:  501 / 2000 [ 25%]  (Sampling)
Chain 4: Iteration:  700 / 2000 [ 35%]  (Sampling)
Chain 4: Iteration:  900 / 2000 [ 45%]  (Sampling)
Chain 4: Iteration: 1100 / 2000 [ 55%]  (Sampling)
Chain 4: Iteration: 1300 / 2000 [ 65%]  (Sampling)
Chain 4: Iteration: 1500 / 2000 [ 75%]  (Sampling)
Chain 4: Iteration: 1700 / 2000 [ 85%]  (Sampling)
Chain 4: Iteration: 1900 / 2000 [ 95%]  (Sampling)
Chain 4: Iteration: 2000 / 2000 [100%]  (Sampling)
Chain 4: 
Chain 4:  Elapsed Time: 0.134 seconds (Warm-up)
Chain 4:                0.291 seconds (Sampling)
Chain 4:                0.425 seconds (Total)
Chain 4: 
Warning messages:
1: package 'rstan' was built under R version 4.0.3 
Warning messages:
1: package 'rstan' was built under R version 4.0.3 
2: package 'StanHeaders' was built under R version 4.0.3 
Warning messages:
1: package 'rstan' was built under R version 4.0.3 
2: package 'StanHeaders' was built under R version 4.0.3 
3: package 'ggplot2' was built under R version 4.0.3 
2: package 'StanHeaders' was built under R version 4.0.3 
3: package 'ggplot2' was built under R version 4.0.3 
3: package 'ggplot2' was built under R version 4.0.3 
Warning messages:
1: package 'rstan' was built under R version 4.0.3 
2: package 'StanHeaders' was built under R version 4.0.3 
3: package 'ggplot2' was built under R version 4.0.3 

Warning messages:
1: Rows containing NAs were excluded from the model. 
2: Rows containing NAs were excluded from the model. 
Execution halted
